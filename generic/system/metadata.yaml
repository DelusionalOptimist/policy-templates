version: v0.1.7
policyRules:
- name: maint-tools-access
  precondition:
  - /sbin/*
  - OPTSCAN
  description:
    refs:
    - name: MITRE-TTP
      url:
      - https://attack.mitre.org/techniques/T1553/
    tldr: Restrict access to maintenance tools (apk, mii-tool, ...)
    detailed: Container images might contain maintenance tools which should ideally
      never be used in prod env, or if used, should be used only in certain time frames.
      Examples include, dynamic package management tools, mii-tool, iptables etc
  yaml: ksp-audit-maintenance-tool-access.yaml
- name: trusted-cert-mod
  precondition: 
  - /etc/ssl/.*
  - OPTSCAN
  description:
    refs:
    - name: MITRE-TTP
      url:
      - https://attack.mitre.org/techniques/T1553/
    tldr: Restrict access to trusted certificated bundles in the OS image
    detailed: Operating systems maintain a list of trusted certificates (often called
      trust bundles) in file system. These bundles decides which authorities are trusted.
      Subverting these trust controls would essentially allow an adversary to operate
      as a trusted entity. Adversaries may undermine security controls that will either
      warn users of untrusted activity or prevent execution of untrusted programs.
      Operating systems and security products may contain mechanisms to identify programs
      or websites as possessing some level of trust. Examples of such features would
      include a program being allowed to run because it is signed by a valid code
      signing certificate, a program prompting the user with a warning because it
      has an attribute set from being downloaded from the Internet, or getting an
      indication that you are about to connect to an untrusted site.
  yaml: ksp-unsecured_credentials_access.yaml
- name: system-owner-discovery
  precondition: 
  - /usr/bin/who
  - OPTSCAN
  description:
    refs:
    - name: MITRE-TTP-T1082
      url:
      - https://attack.mitre.org/techniques/T1082/
    tldr: System Information Discovery - block system owner discovery commands
    detailed: An adversary may attempt to get detailed information about the operating system and hardware, including
      version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System
      Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the
      adversary fully infects the target and/or attempts specific actions.
  yaml: ksp-mitre-system-owner-user-discovery.yaml
- name: write-under-bin-dir
  precondition: 
  - /bin/*
  - OPTSCAN
  description:
    refs:
    - name: NIST-SI-4
      url:
      - https://csf.tools/reference/nist-sp-800-53/r5/si/si-4/
    tldr: System and Information Integrity - System Monitoring make directory under /bin/
    detailed: System monitoring includes external and internal monitoring. External monitoring
      includes the observation of events occurring at system boundaries. Internal monitoring
      includes the observation of events occurring within the system. Organizations monitor systems,
      for example, by observing audit activities in real time or by observing other system aspects 
      such as access patterns, characteristics of access, and other actions.
  yaml: ksp-nist-si-4-mkdir-bin-dir.yaml
- name: write-under-dev-dir
  precondition: 
  - /dev/*
  - OPTSCAN
  description:
    refs:
    - name: NIST-SI-4
      url:
      - https://csf.tools/reference/nist-sp-800-53/r5/si/si-4/
    tldr: System and Information Integrity - System Monitoring make files under /dev/
    detailed: System monitoring includes external and internal monitoring. External monitoring
      includes the observation of events occurring at system boundaries. Internal monitoring
      includes the observation of events occurring within the system. Organizations monitor systems,
      for example, by observing audit activities in real time or by observing other system aspects 
      such as access patterns, characteristics of access, and other actions.
  yaml: ksp-nist-si-4-create-file-in-dev-dir.yaml
- name: cronjob-cfg
  precondition: 
  - /var/cron/*
  - OPTSCAN
  description:
    refs:
    - name: NIST-SI-4
      url:
      - https://csf.tools/reference/nist-sp-800-53/r5/si/si-4/
    tldr: System and Information Integrity - System Monitoring Detect access to cronjob files
    detailed: System monitoring includes external and internal monitoring. External monitoring
      includes the observation of events occurring at system boundaries. Internal monitoring
      includes the observation of events occurring within the system. Organizations monitor systems,
      for example, by observing audit activities in real time or by observing other system aspects 
      such as access patterns, characteristics of access, and other actions.
  yaml: ksp-nist-si-4-detect-access-to-cron-job-files.yaml
- name: pkg-mngr-exec
  precondition: 
  - /bin/*
  - OPTSCAN
  description:
    refs:
    - name: NIST-CM-7-5
      url:
      - https://csf.tools/reference/nist-sp-800-53/r5/cm/cm-7/cm-7-5/
    tldr: System and Information Integrity - Least Functionality deny execution of package manager process in container
    detailed: Authorized software programs can be limited to specific versions or from a specific source. To facilitate
      a comprehensive authorized software process and increase the strength of protection for attacks that bypass
      application level authorized software, software programs may be decomposed into and monitored at different 
      levels of detail. These levels include applications, application programming interfaces, application modules,
      scripts, system processes, system services, kernel functions, registries, drivers, and dynamic link libraries. 
  yaml: ksp-nist-si-4-execute-package-management-process-in-container.yaml
- name: k8s-client-tool-exec
  precondition: 
  - /usr/local/bin/kubectl
  description:
    refs:
    - name: MITRE_T1609_container_administration_command
      url:
      - https://attack.mitre.org/techniques/T1609/
    tldr: Adversaries may abuse a container administration service to execute commands within a container.
    detailed: Adversaries may abuse a container administration service to execute commands within a container. A container administration service such as the Docker daemon, the Kubernetes API server, or the kubelet may allow remote management of containers within an environment.
  yaml: ksp-deny-k8s-client-tool-execution-inside container.yaml
- name: remote-file-copy
  precondition: 
  - /usr/bin/rsync
  - OPTSCAN
  description:
    refs:
    - name: MITRE_TA0010_exfiltration
      url:
      - https://attack.mitre.org/tactics/TA0010/
    tldr: The adversary is trying to steal data.
    detailed: Exfiltration consists of techniques that adversaries may use to steal data from your network. Once they’ve collected data, adversaries often package it to avoid detection while removing it. This can include compression and encryption. Techniques for getting data out of a target network typically include transferring it over their command and control channel or an alternate channel and may also include putting size limits on the transmission.
  yaml: ksp-deny-remote-file-copy.yaml
- name: write-in-shm-dir
  precondition: 
  - /dev/shm*
  - OPTSCAN
  description:
    refs:
    - name: MITRE_execution
      url:
      - https://attack.mitre.org/tactics/TA0002/
    tldr: The adversary is trying to write under shm folder
    detailed: The adversary is trying to run malicious code. Execution consists of techniques that result in adversary-controlled code running on a local or remote system. Techniques that run malicious code are often paired with techniques from all other tactics to achieve broader goals, like exploring a network or stealing data.
  yaml: ksp-deny-write-in-shm-folder.yaml
- name: write-etc-dir
  precondition: 
  - /etc*
  - OPTSCAN
  description:
    refs:
    - name: MITRE_TA0005_defense_evasion
      url:
      - https://attack.mitre.org/tactics/TA0005/
    tldr: The adversary is trying to avoid being detected.
    detailed: Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.
  yaml: ksp-deny-write-under-etc-directory.yaml
- name: shell-history-mod
  precondition: 
  - /root/*_history
  - OPTSCAN
  description:
    refs:
    - name: MITRE_T1070_indicator_removal
      url:
      - https://attack.mitre.org/techniques/T1070/
    tldr: Adversaries may delete or modify artifacts generated within systems to remove evidence.
    detailed: Adversaries may delete or modify artifacts generated within systems to remove evidence of their presence or hinder defenses. Various artifacts may be created by an adversary or something that can be attributed to an adversary’s actions. Typically these artifacts are used as defensive indicators related to monitored events, such as strings from downloaded files, logs that are generated from user actions, and other data analyzed by defenders. Location, format, and type of artifact (such as command or login history) are often specific to each platform. Removal of these indicators may interfere with event collection, reporting, or other processes used to detect intrusion activity. This may compromise the integrity of security solutions by causing notable events to go unreported. This activity may also impede forensic analysis and incident response, due to lack of sufficient data to determine what occurred.
  yaml: ksp-shell-history-modification.yaml